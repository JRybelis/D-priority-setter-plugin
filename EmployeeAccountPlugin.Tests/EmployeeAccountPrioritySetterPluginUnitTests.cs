using EmployeeAccountPlugin.UnitTests.TestSetup.Helpers; using FakeItEasy; using System.Linq; using FakeXrmEasy.Plugins; using Microsoft.Xrm.Sdk; using Microsoft.Xrm.Sdk.Query; using System; using System.Collections.Generic; using Xunit;  namespace EmployeeAccountPlugin.UnitTests {     public class EmployeeAccountPrioritySetterPluginUnitTests : FakeXrmEasyTestsBase     {         [Fact]         public void ExecuteThrowsExceptionOnContextStageNot20()         {             // Arrange             const string requestMessage = "Create";             const string exceptionMessage = "Must run as pre-operation stage 20";             var contextStage = 30;             var account = new Entity("account")             {                 Id = Guid.NewGuid(),                 LogicalName = "Fake account 1"             };              var target = new Entity("jok_employeeaccount") { Id = Guid.NewGuid() };             target.Attributes.Add("jok_name", "Mr. Eternal");             target.Attributes.Add("jok_priority", new OptionSetValue(1));             target.Attributes.Add("jok_Lookaccountup", new EntityReference("account", account.Id));              var inputParameters = new ParameterCollection             {                 { "Target", target }             };              pluginContext.InputParameters = inputParameters;             pluginContext.MessageName = requestMessage;             pluginContext.Stage = contextStage;             context.Initialize(new List<Entity> { account, target });               // Act             try             {                 context.ExecutePluginWith<EmployeeAccountPrioritySetterPlugin>(pluginContext);                 Assert.Fail("Expected exception was not thrown.");             } catch (InvalidPluginExecutionException ex)             {                 Assert.Contains(ex.Message, exceptionMessage);             }         }          [Fact]         public void ExecuteThrowsExceptionOnMessageNotCreateOrUpdate()         {             // Arrange             const string requestMessage = "Delete";             const string exceptionMessage = "Registered for " + requestMessage + " only Create and Update are supported.";             var contextStage = 20;              var account = new Entity("account")             {                 Id = Guid.NewGuid(),                 LogicalName = "Fake account 1"             };              var target = new Entity("jok_employeeaccount") { Id = Guid.NewGuid() };             target.Attributes.Add("jok_name", "Mr. Eternal");             target.Attributes.Add("jok_priority", new OptionSetValue(1));             target.Attributes.Add("jok_Lookaccountup", new EntityReference("account", account.Id));              var inputParameters = new ParameterCollection             {                 { "Target", target }             };              pluginContext.InputParameters = inputParameters;             pluginContext.MessageName = requestMessage;             pluginContext.Stage = contextStage;             context.Initialize(new List<Entity> { account, target });               // Act             try             {                 context.ExecutePluginWith<EmployeeAccountPrioritySetterPlugin>(pluginContext);                 Assert.Fail("Expected exception was not thrown.");             }             catch (InvalidPluginExecutionException ex)             {                 Assert.Contains(ex.Message, exceptionMessage);             }         }          [Fact]         public void ExecuteThrowsExceptionOnWrongPrimaryEntity()         {             // Arrange             const string logicalEntityName = "contact";             const string requestMessage = "Create";             const string exceptionMessage = "Registered for " + logicalEntityName + " entity and only jok_employeeaccount is supported.";             var contextStage = 20;              var account = new Entity("account")             {                 Id = Guid.NewGuid(),                 LogicalName = "Fake account 1"             };              var target = new Entity("contact") { Id = Guid.NewGuid() };             target.Attributes.Add("jok_name", "Mr. Eternal");             target.Attributes.Add("jok_priority", new OptionSetValue(1));             target.Attributes.Add("jok_Lookaccountup", new EntityReference("account", account.Id));              var inputParameters = new ParameterCollection             {                 { "Target", target }             };              pluginContext.InputParameters = inputParameters;             pluginContext.MessageName = requestMessage;             pluginContext.Stage = contextStage;             pluginContext.PrimaryEntityName = target.LogicalName;             context.Initialize(new List<Entity> { account, target });              // Act             try             {                 context.ExecutePluginWith<EmployeeAccountPrioritySetterPlugin>(pluginContext);                 Assert.Fail("Expected exception was not thrown.");             }             catch (InvalidPluginExecutionException ex)             {                 Assert.Contains(ex.Message, exceptionMessage);             }         }          [Fact]         public void ExecuteThrowsExceptionOnTargetEntityNull()         {             // Arrange             const string logicalEntityName = "jok_employeeaccount";             const string requestMessage = "Create";             const string exceptionMessage = "The employee account is null";             var contextStage = 20;              var account = new Entity("account")             {                 Id = Guid.NewGuid(),                 LogicalName = "Fake account 1"             };              Entity target = null;              var inputParameters = new ParameterCollection             {                 { "Target", target }             };              pluginContext.InputParameters = inputParameters;             pluginContext.MessageName = requestMessage;             pluginContext.Stage = contextStage;             pluginContext.PrimaryEntityName = logicalEntityName;             context.Initialize(new List<Entity> { account });              // Act             try             {                 context.ExecutePluginWith<EmployeeAccountPrioritySetterPlugin>(pluginContext);                 Assert.Fail("Expected exception was not thrown.");             }             catch (InvalidPluginExecutionException ex)             {                 Assert.Contains(ex.Message, exceptionMessage);             }         }          [Fact]         public void ExecuteThrowsExceptionOnPriorityOutOfRange()         {             // Arrange             const string logicalEntityName = "jok_employeeaccount";             const string requestMessage = "Create";             const string exceptionMessage = "The Priority level is outside of the range of accepted values (between 1 and 5).";             var contextStage = 20;              var account = new Entity("account")             {                 Id = Guid.NewGuid(),                 LogicalName = "Fake account 1"             };              var target = new Entity("jok_employeeaccount") { Id = Guid.NewGuid() };             target.Attributes.Add("jok_name", "Mr. Eternal");             target.Attributes.Add("jok_priority", new OptionSetValue(6));             target.Attributes.Add("jok_lookaccountup", new EntityReference("account", account.Id));              var linkedAccount = target.Attributes["jok_lookaccountup"] as EntityReference;              var inputParameters = new ParameterCollection             {                 { "Target", target }             };              pluginContext.InputParameters = inputParameters;             pluginContext.MessageName = requestMessage;             pluginContext.Stage = contextStage;             pluginContext.PrimaryEntityName = logicalEntityName;             context.Initialize(new List<Entity> { account });              A.CallTo(() => service.RetrieveMultiple(A<QueryExpression>.That.Matches(                 q => q.Criteria.Conditions.Any(                     c => c.AttributeName == "accountid" &&                      c.Values.Contains(linkedAccount.Id)))))                 .Returns(new EntityCollection(new List<Entity> { account }));               A.CallTo(() => service.RetrieveMultiple(A<QueryExpression>.That.Matches(                 q => q.EntityName == target.LogicalName &&                 q.Criteria.Conditions.Any(                     c => c.AttributeName == "jok_lookaccountup" &&                     c.Values.Contains(account.Id)))))                 .Returns(new EntityCollection(new List<Entity> { target }));              // Act             try             {                 context.ExecutePluginWith<EmployeeAccountPrioritySetterPlugin>(pluginContext);                 Assert.Fail("Expected exception was not thrown.");             }             catch (InvalidPluginExecutionException ex)             {                 Assert.Contains(ex.Message, exceptionMessage);             }         }          [Fact]         public void ExecuteSetsPriorityAndUpdatesEmployeeAccount()         {             // Arrange             const string logicalEntityName = "jok_employeeaccount";             const string requestMessage = "Create";             var contextStage = 20;              var account = new Entity("account")             {                 Id = Guid.NewGuid(),                 LogicalName = "Fake account 1"             };              var target = new Entity("jok_employeeaccount") { Id = Guid.NewGuid() };             target.Attributes.Add("jok_name", "Mr. Eternal");             target.Attributes.Add("jok_priority", new OptionSetValue(2));             target.Attributes.Add("jok_lookaccountup", new EntityReference("account", account.Id));              var linkedAccount = target.Attributes["jok_lookaccountup"] as EntityReference;              var inputParameters = new ParameterCollection             {                 { "Target", target }             };              pluginContext.InputParameters = inputParameters;             pluginContext.MessageName = requestMessage;             pluginContext.Stage = contextStage;             pluginContext.PrimaryEntityName = logicalEntityName;             context.Initialize(new List<Entity> { account, target });              A.CallTo(() => service.RetrieveMultiple(A<QueryExpression>.That.Matches(                 q => q.Criteria.Conditions.Any(                     c => c.AttributeName == "accountid" &&                      c.Values.Contains(linkedAccount.Id)))))                 .Returns(new EntityCollection(new List<Entity> { account }));               A.CallTo(() => service.RetrieveMultiple(A<QueryExpression>.That.Matches(                 q => q.EntityName == target.LogicalName &&                 q.Criteria.Conditions.Any(                     c => c.AttributeName == "jok_lookaccountup" &&                     c.Values.Contains(account.Id)))))                 .Returns(new EntityCollection(new List<Entity> { target }));               // Act             context.ExecutePluginWith<EmployeeAccountPrioritySetterPlugin>(pluginContext);                           // Assert             A.CallTo(() => service.Update(target)).MustHaveHappenedOnceExactly();         }          [Fact]         public void ExecuteDoesNotUpdatePriorityIfItComesInUnchanged()         {             // Arrange             const string logicalEntityName = "jok_employeeaccount";             const string requestMessage = "Update";             var contextStage = 20;              var account = new Entity("account")             {                 Id = Guid.NewGuid(),                 LogicalName = "Fake account 1"             };              var target = new Entity("jok_employeeaccount") { Id = Guid.NewGuid() };             target.Attributes.Add("jok_employeeaccountId", target.Id);             target.Attributes.Add("jok_name", "Mr. Eternal");             target.Attributes.Add("jok_priority", new OptionSetValue(2));             target.Attributes.Add("jok_lookaccountup", new EntityReference("account", account.Id));              var existingEmployeeAccount = new Entity("jok_employeeaccount") { Id = target.Id };             existingEmployeeAccount.Attributes.Add("jok_employeeaccountId", target.Id);             existingEmployeeAccount.Attributes.Add("jok_name", "Mr. Eternal");             existingEmployeeAccount.Attributes.Add("jok_priority", new OptionSetValue(2));             existingEmployeeAccount.Attributes.Add("jok_lookaccountup", new EntityReference("account", account.Id));              var linkedAccount = target.Attributes["jok_lookaccountup"] as EntityReference;              var inputParameters = new ParameterCollection             {                 { "Target", target }             };              pluginContext.InputParameters = inputParameters;             pluginContext.MessageName = requestMessage;             pluginContext.Stage = contextStage;             pluginContext.PrimaryEntityName = logicalEntityName;             context.Initialize(new List<Entity> { account, target });              A.CallTo(() => service.RetrieveMultiple(A<QueryExpression>.That.Matches(                 q => q.Criteria.Conditions.Any(                     c => c.AttributeName == "accountid" &&                      c.Values.Contains(linkedAccount.Id)))))                 .Returns(new EntityCollection(new List<Entity> { account }));               A.CallTo(() => service.RetrieveMultiple(A<QueryExpression>.That.Matches(                 q => q.EntityName == target.LogicalName &&                 q.Criteria.Conditions.Any(                     c => c.AttributeName == "jok_lookaccountup" &&                     c.Values.Contains(account.Id)))))                 .Returns(new EntityCollection(new List<Entity> { target }));              A.CallTo(() => service.Retrieve("jok_employeeaccount", (Guid)existingEmployeeAccount["jok_employeeaccountId"], new ColumnSet("jok_priority"))).Returns(account);               // Act             context.ExecutePluginWith<EmployeeAccountPrioritySetterPlugin>(pluginContext);                           // Assert             A.CallTo(() => service.Update(target)).MustNotHaveHappened();         }     } }